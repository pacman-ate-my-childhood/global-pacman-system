<div class="modal">
   <label for="nickname">nickname:</label>
   <input type="text name="nickname" id="nickname" />
   <button id="join">join</button>
</div>

<div class="game">

   <ul class="game-header">
      <li>score: <span id="score"></span></li>
      <li class="character"></li>
      <li>mode: <span id="mode"><%= game.mode %></span></li>
   </ul> 
   

	<!-- where all the magic happens! -->
	<div id="canvasContainer" style="width:320px; height:400px">
		<canvas id="mapCanvas" width="320" height="400">
		</canvas>
		<canvas id="charCanvas" width="320" height="400">
		</canvas>
	</div>

	<span class="gameinfo">current map:</span> <span class='map'><%=map.id%></span>
	<br/>
	<div class="playerlist">
		<span class="gameinfo">In this game we have:</span>
		<ul class="list" id="users">
		<% _(game.users).each( function(user, user_id){ %>
			<li class="user"><%=user.character%> [<%=user.nickname%>]</li>
		<% }); %>
		</ul>
	</div>

   <br/>


	<div class="gps_position">
		<span class="gameinfo">GPS details:</span>
		long: <span class="long"></span> <br />
		lat: <span class="lat"></span> <br />
      heading: <span class="heading"></span</br>
		x: <span class="x"></span> <br />
		y: <span class="y"></span> <br />
		updated: <span class="updated"></span>
	</div>

   <div class="ghosts">
      <img class="ghost blue"    src="/static/img/blue_ghost.png"/>
      <img class="ghost orange"  src="/static/img/orange_ghost.png"/>
      <img class="ghost red"     src="/static/img/red_ghost.png"/>
      <img class="ghost pink"    src="/static/img/pink_ghost.png"/>
      <img class="ghost-eatable blue"    src="/static/img/blue_ghost_eatable.png"/>
      <img class="ghost-eatable orange"  src="/static/img/orange_ghost_eatable.png"/>
      <img class="ghost-eatable red"     src="/static/img/red_ghost_eatable.png"/>
      <img class="ghost-eatable pink"    src="/static/img/pink_ghost_eatable.png"/>
      <img class="ghost-dead blue"    src="/static/img/blue_ghost_dead.png"/>
      <img class="ghost-dead orange"  src="/static/img/orange_ghost_dead.png"/>
      <img class="ghost-dead red"     src="/static/img/red_ghost_dead.png"/>
      <img class="ghost-dead pink"    src="/static/img/pink_ghost_dead.png"/>
   </div>

	<script type="text/javascript" src="/static/js/engine.js"></script>
	<script type="text/javascript" src="/static/js/game_state.js"></script>
	<script type="text/javascript" src="/static/js/game_menu.js"></script>
	<script type="text/javascript" src="/static/js/map_view.js"></script>
	<script type="text/javascript" src="/static/js/cheater.js"></script>
	<script type="text/javascript" src="/static/js/geom.js"></script>
	<script type="text/javascript" src="/static/js/coord_translator.js"></script>
	<script type="text/javascript" src="/static/scripts/uuid.js"></script>
	<script src="/socket.io/socket.io.js"></script>
   
	<script type="text/javascript">
		$(function(){
			var my_id = uuid(),
             map_json = <%- JSON.stringify( map ) %>,
				 game_json = <%- JSON.stringify( game ) %>,
				 game_state = new GameState(map_json, game_json, my_id),
			    engine = new Engine( game_state ),
             watcher;

			game_state.engine = engine;

			game_state.init();
			engine.init();

			new Coord_Translator( game_state.bounds, engine.canvas );



			function build_user_list() {
				$('#users').empty();

				_.each(game_state.users, function(user, user_id) {
					$('#users').append($('<li class="user">' + user.character + ' [' + user.nickname + ']</li>'));
				 });
			}

         function update_score() {
            var score = '' + game_state.users[my_id].score;

            while (score.length < 6) {
               score = '0' + score;
            }
         
            $('#score').text(score);
         }





			var channel_url = window.location.protocol + '//' + window.location.host + '/' + game_state.id,
				 game_channel = io.connect(channel_url);

         $('#join').click(function() {
            var nickname = $('#nickname').val();

            console.log(my_id + ' joining as ' + nickname);

            game_channel.emit('join', my_id, nickname);
         });

			game_channel.on('moved', function(name, location) {
            var character = game_state.characters[name];
				character.prev_location = character.location;
            character.location = location;

            console.log('player [' + character.name + '] at lng:' + character.location.long + ' lat:' + character.location.lat);

				engine.render_frame();
			});

			game_channel.on('left', function (user_id, name) {
            game_state.avaliable_characters.push(game_state.characters[name]);

            delete game_state.characters[name];
            delete game_state.users[user_id];

            engine.render_frame();
            build_user_list();
			});

			game_channel.on('joined', function (user_id, nickname, name) {
            var avaliable = game_state.avaliable_characters, 
                character = game_state.characters[name] = 
                  _.detect(avaliable, function(c) { return c.name === name; });

            avaliable.splice(avaliable.indexOf(character), 1);

            character.user_id = user_id;
            game_state.users[user_id] = { 
               user_id: user_id,
               nickname: nickname,
               character: name,
               score: 0
            };

            /*
             if this in reponse to our own join request then start streaming our
             position coordinates out to the server
             */
            if (user_id === my_id) {
               engine.render_map();
               $('.modal').addClass('hidden');

               function update_position(position) {
                  console.log( 'You moved. Sending', JSON.stringify( position ), 'to the server' );
                  game_channel.emit('move', position.coords);

                  $('.gps_position .long').text(position.coords.longitude);
                  $('.gps_position .lat').text(position.coords.latitude);
                  $('.gps_position .heading').text(position.coords.heading);
                  var xy = coords.long_lat_to_x_y({long:position.coords.longitude, lat:position.coords.latitude});

                  $('.gps_position .x').text(xy.x.toPrecision(3));
                  $('.gps_position .y').text(xy.y.toPrecision(3));

                  $('.gps_position .updated').text(new Date().toString());
               }

               new Cheater(engine, update_position);

               if (window.navigator.geolocation) {
                  watcher = window.navigator.geolocation.watchPosition(
                  update_position,
                  function error( positionError ){
                     alert( positionError.message, positionError.code );
                  },
                  { enableHighAccuracy: true, maximumAge: 0 });
               }

               update_score();
            }

            engine.render_frame();
            build_user_list();
			});

			game_channel.on('game_over', function () {
            if (watcher) { window.navigator.geolocation.clearWatch(watcher); }
				alert( "this game is over" );
				window.location = window.location.protocol + '//' + window.location.host + '/';
			});

			game_channel.on('pacman_wins', function () {
				alert( "pacman has won the game!" );
				window.location = window.location.protocol + '//' + window.location.host + '/';
			});

			game_channel.on('pill_eaten', function (pill_id) {
				game_state.pills = _.filter(game_state.pills, function(pill) { return pill.id !== pill_id });
				engine.render_frame();
			});

			game_channel.on('powerpill_eaten', function (pill_id) {
				game_state.powerpills = _.filter(game_state.powerpills, function(pill) { return pill.id !== pill_id });
				engine.render_frame();
			});

         game_channel.on('ghost_died', function (ghost_id) {
            game_state.characters[ghost_id].dead = true;
            engine.render_frame();
         });

         game_channel.on('ghost_alive', function (ghost_id) {
            game_state.characters[ghost_id].dead = false;
            engine.render_frame();
         });

         game_channel.on('score_changed', function(user_id, score) {
            game_state.users[user_id].score = score;
            update_score();
         });

         game_channel.on('mode_changed', function(mode) {
            game_state.mode = mode;
            console.log('changed game mode to ' + mode);
            $('#mode').text(mode);
            engine.render_frame();
         });

		});
	</script>

</div>
